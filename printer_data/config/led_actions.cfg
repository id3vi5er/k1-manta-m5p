[gcode_macro _SP_NOTIFY]
gcode:
    {% set action = params.ACTION|default("")|string %}
    {% set lane = params.LANE|default(printer.save_variables.variables.last_loaded_lane)|default(-1)|int %}
    {% set complete = params.COMPLETE|default(1)|int %}
    {% set error = params.ERROR|default(0)|int %}
    {% set sp = printer["gcode_macro _SP_VARS"] %}
    
    {% if sp.debug == 1 %}
      M118 { rawparams }
    {% endif %}
    
    _SP_LED_ACTIONS ACTION={ action } LANE={ lane } COMPLETE={ complete } ERROR={ error }

[gcode_macro _SP_LED_ACTIONS]
gcode:
    {% set action = params.ACTION|default("")|string %}
    {% set lane = params.LANE|default(printer.save_variables.variables.last_loaded_lane)|default(-1)|int %}
    {% set complete = params.COMPLETE|default(1)|int %}
    {% set error = params.ERROR|default(0)|int %}

    # Define colors (brightness values from 0.0 to 1.0)
    {% set COLORS = {
        "GREEN": {"r": 0.0, "g": 1.0, "b": 0.0},
        "BLUE": {"r": 0.0, "g": 0.0, "b": 1.0},
        "YELLOW": {"r": 1.0, "g": 1.0, "b": 0.0},
        "RED": {"r": 1.0, "g": 0.0, "b": 0.0},
        "PURPLE": {"r": 1.0, "g": 0.0, "b": 1.0},
        "OFF": {"r": 0.0, "g": 0.0, "b": 0.0}
    } %}

    # Lane-to-LED mapping (lane number: LED index)
    {% set led_index_map = {0: 3, 1: 2, 2: 1, -1: 1} %}
    {% set led_index = led_index_map.get(lane, 1) %}  # Default to 1 if lane not found
    {% set prev_lane = printer.save_variables.variables.previous_lane|default(-1)|int %}

    # Helper to set an LED color with validation
    {% macro set_led(index, color) -%}
      {% if index >= 1 %}
        SET_LED LED=PICO RED={ color.r } GREEN={ color.g } BLUE={ color.b } INDEX={ index }
      {% endif %}
    {%- endmacro %}

    # Helper to set all LEDs
    {% macro set_all_leds(color) -%}
      {% for l in range(1, 4) %}
        { set_led(l, color) }
      {% endfor %}
    {%- endmacro %}

    # Error handling
    {% if error == 1 %}
        {% for _ in range(5) %}
            { set_all_leds(COLORS["RED"]) }
            G4 P250
            { set_all_leds(COLORS["OFF"]) }
            G4 P250
        {% endfor %}
        {% if led_index >= 1 %}
            { set_led(led_index, COLORS["RED"]) }
        {% endif %}

    # Lane loaded - special handling for lane 3
    {% elif action == "loaded" %}
        {% if lane == 3 %}
            { set_all_leds(COLORS["GREEN"]) }
        {% elif led_index >= 1 %}
            { set_led(led_index, COLORS["GREEN"]) }
        {% endif %}

    # Hub operations
    {% elif action in ["hub_loading", "hub_unloading"] %}
        {% if lane == 3 %}
            {% for _ in range(3) %}
                { set_all_leds(COLORS["BLUE"]) }
                G4 P500
                { set_all_leds(COLORS["OFF"]) }
                G4 P500
            {% endfor %}
        {% elif led_index >= 1 %}
            {% for _ in range(3) %}
                { set_led(led_index, COLORS["BLUE"]) }
                G4 P500
                { set_led(led_index, COLORS["OFF"]) }
                G4 P500
            {% endfor %}
        {% endif %}
        { set_all_leds(COLORS["OFF"]) }

    # Extruder unloading
    {% elif action == "extruder_unloading" %}
        {% if lane == 3 %}
            { set_all_leds(COLORS["YELLOW"]) }
        {% elif led_index >= 1 %}
            { set_led(led_index, COLORS["YELLOW"]) }
        {% endif %}
        G4 P5000
        { set_all_leds(COLORS["OFF"]) }

    # Hotend or extruder loading/unloading
    {% elif action in ["hotend_loading", "hotend_unloading", "extruder_loading"] %}
        {% if lane == 3 or prev_lane == 3 %}
            {% for _ in range(5) %}
                { set_all_leds(COLORS["YELLOW"]) }
                G4 P400
                { set_all_leds(COLORS["OFF"]) }
                G4 P400
            {% endfor %}
            { set_all_leds(COLORS["YELLOW"]) }
        {% elif prev_lane > -1 and led_index >= 1 and prev_lane != lane %}
            {% for _ in range(5) %}
                { set_led(led_index_map.get(prev_lane, 1), COLORS["YELLOW"]) }
                { set_led(led_index, COLORS["YELLOW"]) }
                G4 P400
                { set_led(led_index_map.get(prev_lane, 1), COLORS["OFF"]) }
                { set_led(led_index, COLORS["OFF"]) }
                G4 P400
            {% endfor %}
            { set_led(led_index_map.get(prev_lane, 1), COLORS["YELLOW"]) }
            { set_led(led_index, COLORS["YELLOW"]) }
        {% endif %}

    # Runout only
    {% elif action == "runout" %}
        {% if lane == 3 %}
            { set_all_leds(COLORS["RED"]) }
        {% elif led_index >= 1 %}
            { set_led(led_index, COLORS["RED"]) }
        {% endif %}

    # Pause
    {% elif action == "pause" %}
        { set_all_leds(COLORS["PURPLE"]) }

    # Print end
    {% elif action == "print_end" %}
        # Blink all LEDs in purple 10 times
        {% for _ in range(10) %}
            { set_all_leds(COLORS["PURPLE"]) }
            G4 P500
            { set_all_leds(COLORS["OFF"]) }
            G4 P500
        {% endfor %}
        
        # Restore active lane LED to green
        {% if prev_lane == 3 %}
            { set_all_leds(COLORS["GREEN"]) }
        {% elif prev_lane > -1 %}
            {% set active_led = led_index_map.get(prev_lane, 1) %}
            { set_led(active_led, COLORS["GREEN"]) }
        {% endif %}
    {% endif %}

    # Save current lane for reference
    SAVE_VARIABLE VARIABLE=previous_lane VALUE={ lane }